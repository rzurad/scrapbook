// solving ProjectEuler.net problems using JS when I'm bored.
(function () {
    "use strict";

    /*
     * Problem runner function. Logs generated answer to the actual answer
     * along with the time the function took to execute in ms.
     * Any additional arguments pass through as arguments to f
     *
     *  str <string>: passed to console.log as first arg
     *  answer <any>: expected return value of f
     *  f <function>: function that when run will return the correct answer
     */
    function run(str, answer, f) {
        var args = Array.prototype.slice.call(arguments, 3),

            start = new Date().valueOf(),
            ret = f.apply && f.apply(0, args),
            end = new Date().valueOf();

        console.log(str, ret === answer, ret, end - start);
    }

    function compare(str, correct, check) {
        console.log(str, correct, check, correct === check);
    }


    /* Problem 1
     * =========
     * If we list all the natural numbers below 10 that are multiples of 3 or 5,
     * we get 3, 5, 6 and 9. The sum of these multiples is 23.
     * 
     * Find the sum of all the multiples of 3 or 5 below 1000.
     */
    //TODO: Write a function that can handle x = 1000000000
    run('Problem 1:', 233168, function (max) {
        var t = 0;

        while (--max) {
            t += !(max % 3) || !(max % 5) ? max : 0;
        }
        
        return t;
    }, 1000);

    //68 chars
    compare('Problem 1 [Tweet]:', 233168,
        (function(n,t){while(--n){t+=!(n%3)||!(n%5)?n:0;}return t;})(1000,0)
    );



    /* Problem 2
     * =========
     * Each new term in the Fibonacci sequence is generated by adding the
     * previous two terms. By starting with 1 and 2, the first 10 terms will be:
     *
     *      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     *
     * By considering the terms in the Fibonacci sequence whose values do not
     * exceed four million, find the sum of the even-valued terms.
     */
    run('Problem 2:', 4613732, function (max) {
        var sum = 0,
            x = 0,
            v = 0,
            cache = {};

        //using a cache reduces execution time from 3.5s to 0ms
        function fib(n) {
            return cache[n] ||
                (cache[n] = n === 0 || n === 1 ? n : fib(n - 1) + fib(n - 2));
        }

        while ((v = fib(x++)) < max) {
            sum += !!(v % 2) ? v : 0;
        }

        return sum;
    }, 4000000);

    //134 chars
    compare('Problem 2 [Tweet]:', 4613732,
        (function(m,s,x,v,c){function f(n){return c[n]||(c[n]=n<2?n:f(n-1)+f(n-2))}while((v=f(x++))<m){s+=!!(v%2)?v:0}return s})(4e6,0,0,0,{})
    );

    /* Problem 3
     * =========
     * A palindromic number reads the same both ways. The largest palindrome
     * made from the product of two 2-digit numbers is 9009 = 91 99.
     *
     * Find the largest palindrome made from the product of two 3-digit numbers.
     */
    run('Problem 3:', false, function (digits) {
        
    }, 2);



    /* Problem 5
     * =========
     * 2520 is the smallest number that can be divided by each of the numbers
     * from 1 to 10 without any remainder.
     *
     * What is the smallest positive number that is evenly divisible by all of
     * the numbers from 1 to 20?
     */
    //TODO: bad solution. takes 1.8 seconds to complete. optimize
    run('Problem 5:', 232792560, function (max) {
        var curr,
            test = max;

        do {
            test++; 

            for (curr = max; curr > 1; curr--) {
                if (test % curr) {
                    break;
                }
            }
        } while (curr !== 1);

        return test;
    }, 20);



    /* Problem 6
     * =========
     * The sum of the squares of the first ten natural numbers is,
     *
     *      1^2 + 2^2 + ... + 10^2 = 385
     *
     * The square of the sum of the first ten natural numbers is,
     *
     *      (1 + 2 + ... + 10)^2 = 552 = 3025
     *
     * Hence the difference between the sum of the squares of the first ten
     * natural numbers and the square of the sum is 3025  385 = 2640.
     *
     * Find the difference between the sum of the squares of the first one
     * hundred natural numbers and the square of the sum.
     */
    run('Problem 6:', 25164150, function (max) {
        var sum2 = 0,
            i;

        //triangular number function. Gives us 1 + 2 + ... + n
        function t(n) {
            return (n * (n + 1)) / 2;
        }

        //TODO: Find a mathematical function to calculate this
        for (i = 1; i <= max; i++) {
            sum2 += i * i;
        }

        return Math.pow(t(max), 2) - sum2;
    }, 100);
})();
